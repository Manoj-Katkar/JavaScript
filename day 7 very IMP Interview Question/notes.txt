JS Engine 
    is the execution unit of browser 
    and it is resposible for the code execution only at the browser side 
    each and every browser have differnt JS Engine 
    
    example : 

    Browser            Js Engine
    chrome               V8
    FireFox              SpiderMonkey
    Safari               JS core
    MS Edge              Chakra



    parser = check for the syntax mistake it will return abstract syntax tree is AST 
    AST = it is just the result of the parser  
    interprter : it will check the code line by line 
    JIT = just intime compiler 
    Byte code : it will understand by the Machine only 
    then code execution will done




Window : 
     it is the supermost object in javascript
     it refers to the browser window 
     it will have differnt method and properties 
     if we declare the variable using the var then it will also get store in the Window object 

    (IMP) if we want to acess any properties then  we can access with window as prefix  or we can use directlly also only for the window object 
     example = window.alert();


Note : all the methods are the childs of the window  object (prompt() , document() , etc )

//...........................................//

this Keyword: 
    if you declare it globally then it will refer to the Window Object 
    so we can access the global scope varaible in the local scope using 
    Syntax :
            this.globalVariableName
 
//.........................................................//


GEC : (Global Execution Context  we have two phase )
when we create the javascript code then GEC will get created 
            phase 1 = varaible declaration or function declaration phase

            phase 2 = It will initialize the value to the variables  and also checks the function call

            then for the each function calling statement it will create the Function Execution Context and it will also have the 2 phase as similar to the GEC  

call stack : it will give the info about the which function running now  or to track the which functions are getting executed 







//..........................//

Nested Function : function inside the function








//...........................//

Closure(very very IMP Question )
    it is the scope or the memory allocation which gets created when you access the outer function variable inside the inner function

  or whenever we will try to access the outer function variables inside the inner function then the closure will get created for the outer function 



//.......................................//


Lexical Scoping : 


variable hosting 
  moving variable declaration to the top is known as varaible hosting
  before the code get execute it will first get load 
  means the taking the varaible declaration to the top 

Note : it will return undefined for the only var variable but for let and const it will throw the error (Uncath referance error)
        because of the (Temporal Dead Zone )   very IMP
        1)means for script scope the value will be unavailable  so you will get error here 
        2)and for the global scope and local scope  varables will be always undefined 



//................................................//

function hosting
      means the taking the function declaration to the top
      it is only applicabled for the only named function
      it is not compulsory to call the function after declaration you can call before declaration


//..............................................//



Array :
     notes in phone in image format
     array length is not fixed in javascript
     after deleting  the element the length will remain same but index position will get deleted 
     if we create the any array then parent will be the array object 
     it is like inheritance we can access the properties and methods of an parent 

differant way : 
     1)literal way 
     2)using array constructor (using the new and arrayConstructor(length of the Array))
              IMP = here it will for 1 value it will treat the length of the Array and more than one value it will treat as the array elements 
                  1)new arrayConstructor(length of the Array); or we can directlly pass the values 
                  2)new arrayConstructor(Array elements directlly );
                          example: var arr = new arrayConstructor(10,20,40,54,78,69,85);


 3)using Array.of(pass the array elements );
              1)of is the one method 
              2)directlly pass the array elements in Array.of();
              3)it will treat only as the element of the Array 

       example:
              var x = Array.of( "Hello" , 20 , 1n , [10 , 50] );



Note : most time we will use the literal way to create the Array element 



//............All methods are the Non static meyhods call with the object referance ....................//



Push() method In Array : 
                it will return the length of the modified array 
                it will add the elements at the last 
                it will help to add the multiple elements 



unshift() method 
            it will add the array element at the beginning 
            you can add the one or more elements like push method 
            it will also return the length of the Array 

pop() method : 
            it will remove the end of the Array element 
            we can only able remove the one element at the time
            if the array is empty then it will give the error 
            it will return the deleted array element


shift() method :
            it will only remove the only one element
            it will remove the array element from the beginning
            and it will return the beginning deleted element


slice() method:
        it will  extract the part of the array and return the new extracted elements in the form of the Array 
        it will take the two arguments
        it will not modify the orignal Array
        it will return array hence we have to store that in the one variable then we can print that part of the Array 
        if we are passing only one argument then fom that index it will return the all array elements in the form of the Array 
        we can also pass the negative values as an argument then it will consider from the last index from the orignal Array .

        example:
              ar.slice(start-index , last-index - 1);   //it will not consider the last index value 


splice() method :
            it will take three or more arguments
            it will affect the orignal array it will make t he changes in  the same array
            when we want to add the elements along with that delete the element then we can go with the splice method
            it will add the array elements at the position for which we have already want to delete the array element
            first two arguments are mandatory to mension

   Arguments :  arr.splice( start-index , delete-count-element , element-that-we-want-to-add);





//...............for  loops  .............................//

Note : in javascript we can able to itearate on the two data structure that is :
                    String and Array

for loop : it is same as the java


find() method:
          it is the higher order function
          it will take one function as an argument
          the function that we are passing that will take the three parameters 
          (array-value , array-index , orignal-array )   //that function will take this three parameters 
          it is the array method
          it will return the first statisfyed element
          it will itearate over the array and return the first element  for the satisfied condition 
          it is the non static method so call it with the help of the object referance 

        Syntax : 
                ArrayName.find((array-value , array-index , orignal-array ) => {
                    console.log(array-value);
                    return (condition ) //like array-value > 50;
                })

Note : if no array element satisfy the condition it will return the undefined 

//...........................//


findIndex() method:
            it is same as the find method but it will return the array element index 
            its return type is number 

        Syntax : 
                ArrayName.findIndex((array-value , array-index , orignal-array ) => {
                    console.log(array-value);
                    return (condition ) //like array-value > 50;  //it will return the index of that element
                })

Note : if no array element satisfy the condition it will return the -1 


//...........................//

filter() method:
            it is also the higher order function 
            it will always return the element of the array 
            it will go and check for each and every Array element 
            it will return one Array and in that array it will return all the satisfied element 
            return type of the filter method is array 

        Syntax : 
                                  //used anaynomous function as the parameter
                ArrayName.filter(function(array-value , array-index , orignal-array ) {
                    console.log(array-value);
                    return (condition ) //like array-value > 50;  //it will return the hole array elements for which the codition is true
                })



Note : if no array element satisfy the condition it will return the empty array 
Note1: Very IMP it is not mandatory that we have to pass the all three parameters in the function 
      filter and map method will not affect the orignal array it will return the new array 




map() method:
          it is also the higher order function
          if we want to perform the same operation for each and every array element then we use map() method
          it will return one array
          it will perform the opearation and it will add the array elements in new array and return that array

        Syntax :
                                  //used arrow function as the parameter
                ArrayName.map((array-value , array-index , orignal-array ) => {
                    console.log(array-value);
                    return (condition ) //like array-value + 50;  //it will return the hole array elements by adding 50 in it for each and every array elements 
                })



Note : if we want to perform the opearation for each and evey array element like addition , subtraction ,  division  , multiplication  it will do the opearation and add the new value in the new array and return  that new array 




some() or every()
          both are the higher order function
          here also we have to pass the condition
          it will return the boolean
          both are the non static

          some():
                  it will return true if the any one element satisfied the codition else it will return false
                  once the condition is satisfy it will not check for thr further elements

          every():
                   it will return true if the each and every element satisfied the codition else it will return false


I have to go through 
reduce() method:
	it is also the higher order method
        if you want to (add the all array elements) then we will use this method
        it will take one call back function as an argument
        it will reduce the array and return the single value
        it will itearate from left to right
        default value of the accumalater will be 0 
        if we want to pass the initial value for the accumalater then at the second-argument pass it then it will go inside the Accumalater-value
        
        
        Syntax :
                                  //used arrow function as the parameter
                ArrayName.reduce((Accumalater-value , Current-value) => {

                        return Accumalater-value + Current-value;
                } , second-argument)




reduceRight()  method:
        it will itearate from right to left
        all other is same to the reduce() method only 



forEach() method:
	    it is used to iterate over the array
|           it is also the higher order function
            it is the inbuilt method in javascript

        Syntax :
                                  //used arrow function as the parameter
                ArrayName.forEach((array-value , array-index , orignal-array ) => {
                    console.log(array-value);

                });

Note Imp : diff between map() and forEach();

map() = it will return the array
forEach() = it will return the void (hence it will return undefined)



//.............................................///

5 ways to itearate over the array
            1) normal for loop
            2) for in loop
            3) for of loop
            4) map();
            5) forEach();

2) for in loop : 
            used to iterate the index of the array  
            (identifier , in , ArrayName);

    
    Syntax:
            for(identifier , in , ArrayName){
                //here we can access the only index of the element
                console.log(index);
            }





3) for of loop
            used to itearate over the values present inside the array 

    Syntax:
            for(identifier , of , ArrayName){
                //here we can access the only array element
                console.log(value);
            }

//.............................//


indexOf() method:;
        it will return the particular index position of the particular array element 
        it will only take the one parameter  that is array element that we want to find index of that element 
        it will return -1 if array element is not present 


    Syntax:
            ArrayName.indexOf((mandatory argument) array-element , (optional-argument) that specify which index I should Start for searching that element);


lastIndexOf() method:;
            it will take the only one argument 
            that is the search the value array element
            and it will search till the last indexOf the array 
            it will return -1 if array element is not present 

    Syntax:
            ArrayName.lastIndexOf( array-element );



fill() method:;
            if we want to fill the same value for all the array element then we will use fill()
            it will take three arguments (value , start-index , last-index ) ; //it will not consider the last index 

    Syntax:
            ArrayName.fill(value , start-index , last-index );



include() method:
        it will return the boolean value 
        if the value is present in the array it will return the true or it will return the false 



Conat():
        it is used to merge two or more arrays 
        it will not affect the orignal array 



    Syntax:
            let a = ArrayName.concat(arrays names how much we want to concatinate  );






///......................remaining .......................//



sort() method:
        it is used to sort the array in Acending or Decending Order 
        by default the sort method will sort the array in Acending order 
        for string it compare the ASCII value of the each word first character and acording to that it will sort the array
        it will make the changes in the orignal Array  
        BY deafult the numbers array element it will treat as the string  and with the first character ASCII value it will sort the array 
        it will take one function as an argument that is Cmparater function
        that function will return negativeValue / positive value / zero value 
        and that function will take two parameters 


reverse() method:
                it is used to reverse the Array
                it will affect the orignal Array


flat() method:
        it is used to convert the muti-dimensional array to single dimensional array 
        it is advance Topic most we will not use it 
        3 dimensional will convert into 2 dimensional array 
        2 dimensional will get converted to the 1 dimensional

But I want to convert the mutidimensional array to single dimension array 
                then pass the ArrayName.flat(3);   //it will convert the 4 dimensional array to the single dimensional array   


join() method:
        it is used to convert the array into String 




// ....................................//

String method 
slice() method : same as the array 



spilit() method : 
        based on the sepearator it will convert the String into Array
        it will take the one argument
        that argument is separator
        for each time separator will be differant
        it will search for the separator in the String then on that basis it will convert the string to Array


SubString() method :
        it will only take the positive value as an argument
        all it is similar to the slice method
        give the continous part of the String

SubStr() method :
        it wil take the two argument
        (start-index , length-of-string-that I want to extract )



replace() method:
        it is used to replace the particular sub-string in the orignal String
        it wil take the two argument (search-value , replace-value)
        it will not modify the orignal String it will return the new String


replaceAll() method:
                it will change the all the occurence of the search value of the matching String 


trim() method:
        it is used to remove the white space at both the side of the String


trimStart() method: remove the space from the starting

trimEnd() method: remove the space from the ending


indexOf() method: we have to pass the character in the form of the String


toString() method:
                it is used to convert the any other datatype in the String DataType

concat() method: it will merge the two or more String

charAt()


charCodeAt()
        it will return the ASCII value of that Character at particular index


join() method
                when we want to convert the Array to the String then we will use join method()

Note : we can use the method chainning to save the line of the code


//......................................................................................................//




Object in javascript:
                key is the unique identifier
                keys should not be repeated
                each and every key : value , will be sepearated by comma
                keys will be stored internally in the form of String


                Two ways we can add the keys in the object
                        1)using dot(.);
                        2)using square-bracket (["key-name"] = value )
                        inside the object use column to add the value
                        outside the object use = to assign the value to the keys

Note :

primitive data types = immutable in javascript (it will save the values for differnt different object address)
non primitive data type  = mutable (here the values will get stored in the same object address )

        in javascript primitive data types re-initailzation of the value will get store in the differant object hence it will throw error
        in case of the array and object it will not throw the error

ways to create the object :
                        1)litearal way
                        2)with the help of the class
                        3)constructor function
                        4)using object constructor


class :
        it is the bluprint in javascript to create the object
        we can create the multiple objects with the help of one class
        if we have the same keys for the multiple objects then create the one class and then create the N no of the objects using that single class


constructor:
        we have to declare the constructor using the constructor Keyword
        each and every class should have constructor
        it is used for thr initailzation values for thr object

3)constructor function
                only with the help of the named function we can able to define the constructor function


4)using object constructor:
                object is object in javascript



this Keyword:
        if we use the use strict then it will return thn undefined
        if we will not use the use strict then it will refer to the window object
        but inside the arrow function it will refer to the parent scope this value if parent is in global then it will refer to the window object
        but if the parent in referance  id undefined then it will return the undefined


//.................................About the Mock.......................//

Note : 
        1)what are the specification of the javascript ?
        2)what is the diff between var , let and const ?
        3)what are keywords in Js
        what are the diff types of scope in Js
        what is the advantage of using the arrow function
        what is the window object in js 
        this keyword in js ? for globally , use strict
        what is the advaange of the immediate invoke function
        what is closure
        what is lexical scoping or scope chainning
        what is the advantage os using use strict 
        range for number datatype 
        advantage of using template leterals 
        explain GEC 
        what is the nested function in javascript
        what is higher order function and call back function
        what is typecasting and explain implict and explicit casting 
        what is variable hosting ans function hosting in js 
        how Many ways we can able to  itearate the array in js 
        what is teh diff between map and for each method 
        diff between slice splice and split method in js 
        how many ways we can able to creatge the object in jsvascript 
        diff between reduce and reduceRight method in js
        diff between filter and find method
        diff between sum and every method 
        WAP TO reverse THE String WITHOUT using reverse method()
        WAP to filter the array elements WITHOUT using filter method
        WAP to find the fibonacci series of the number 
        WAP to check whether it is prime number or not 
        WAP to merge the Array WITHOUT using concat method 
        diff betwenn substr , subString , and Slice method
        how to itearate the String in javascript
        how to convert the string  using 
        with the help of the reduceRight how to reverse the String 
        what is javascript Engine ? 
        how to run the javascript code on server side ?
        what is type coersion ?

