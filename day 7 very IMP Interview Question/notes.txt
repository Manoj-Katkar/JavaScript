JS Engine 
    is the execution unit of browser 
    and it is resposible for the code execution only at the browser side 
    each and every browser have differnt JS Engine 
    
    example : 

    Browser            Js Engine
    chrome               V8
    FireFox              SpiderMonkey
    Safari               JS core
    MS Edge              Chakra



    parser = check for the syntax mistake it will return abstract syntax tree is AST 
    AST = it is just the result of the parser  
    interprter : it will check the code line by line 
    JIT = just intime compiler 
    Byte code : it will understand by the Machine only 
    then code execution will done 




Window : 
     it is the supermost object in javascript 
     it refers to the browser window 
     it will have differnt method and properties 
     if we declare the variable using the var then it will also get store in the Window object 

    (IMP) if we want to acess any properties then  we can access with window as prefix  or we can use directlly also only for the window object 
     example = window.alert();


Note : all the methods are the childs of the window  object (prompt() , document() , etc )

//...........................................//

this Keyword: 
    if you declare it globally then it will refer to the Window Object 
    so we can access the global scope varaible in the local scope using 
    Syntax : 
            this.globalVariableName
 
//.........................................................//


GEC : (Global Execution Context  we have two phase )
when we create the javascript code then GEC will get created 
            phase 1 = varaible declaration or function declaration phase

            phase 2 = It will initialize the value to the variables  and also checks the function call

            then for the each function calling statement it will create the Function Execution Context and it will also have the 2 phase as similar to the GEC  

call stack : it will give the info about the which function running now  or to track the which functions are getting executed 







//..........................//

Nested Function : function inside the function








//...........................//

Closure(very very IMP Question )
    it is the scope or the memory allocation which gets created when you access the outer function variable inside the inner function

  or whenever we will try to access the outer function variables inside the inner function then the closure will get created for the outer function 



//.......................................//


Lexical Scoping : 


variable hosting 
  moving variable declaration to the top is known as varaible hosting
  before the code get execute it will first get load 
  means the taking the varaible declaration to the top 

Note : it will return undefined for the only var variable but for let and const it will throw the error (Uncath referance error)
        because of the (Temporal Dead Zone )   very IMP
        1)means for script scope the value will be unavailable  so you will get error here 
        2)and for the global scope and local scope  varables will be always undefined 



//................................................//

function hosting
      means the taking the function declaration to the top
      it is only applicabled for the only named function
      it is not compulsory to call the function after declaration you can call before declaration


//..............................................//



Array : 
     notes in phone in image format 
     array length is not fixed in javascript
     after deleting  the element the length will remain same but index position will get deleted 
     if we create the any array then parent will be the array object 
     it is like inheritance we can access the properties and methods of an parent 

differant way : 
     1)literal way 
     2)using array constructor (using the new and arrayConstructor(length of the Array))
              IMP = here it will for 1 value it will treat the length of the Array and more than one value it will treat as the array elements 
                  1)new arrayConstructor(length of the Array); or we can directlly pass the values 
                  2)new arrayConstructor(Array elements directlly );
                          example: var arr = new arrayConstructor(10,20,40,54,78,69,85);


 3)using Array.of(pass the array elements );
              1)of is the one method 
              2)directlly pass the array elements in Array.of();
              3)it will treat only as the element of the Array 

       example:
              var x = Array.of( "Hello" , 20 , 1n , [10 , 50] );



Note : most time we will use the literal way to create the Array element 



//............All methods are the Non static meyhods call with the object referance ....................//



Push() method In Array : 
                it will return the length of the modified array 
                it will add the elements at the last 
                it will help to add the multiple elements 



unshift() method 
            it will add the array element at the beginning 
            you can add the one or more elements like push method 
            it will also return the length of the Array 

pop() method : 
            it will remove the end of the Array element 
            we can only able remove the one element at the time
            if the array is empty then it will give the error 
            it will return the deleted array element


shift() method : 
            it will only remove the only one element 
            it will remove the array element from the beginning 
            and it will return the beginning deleted element 


slice() method:
        it will  extract the part of the array and return the new extracted elements in the form of the Array 
        it will take the two arguments 
        it will not modify the orignal Array 
        it will return array hence we have to store that in the one variable then we can print that part of the Array 
        if we are passing only one argument then fom that index it will return the all array elements in the form of the Array 
        we can also pass the negative values as an argument then it will consider from the last index from the orignal Array .

        example:
              ar.slice(start-index , last-index - 1);   //it will not consider the last index value 


splice() method : 
            it will take three or more arguments
            when we want to add the elements along with that delete the element then we can go with the splice method 
            it will add the array elements at the position for which we have already want to delete the array element 
            first two arguments are mandatory to mension 

   Arguments :  arr.splice( start-index , delete-count-element , element-that-we-want-to-add);






















Window
This Keyword
GEC , Closure 
Lexical Scoping
variable hosting , function hosting